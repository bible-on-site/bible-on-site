name: Continous Integration - website

on:
  push:
    branches: master
  pull_request:
    branches: master
  merge_group:
    branches: master
  workflow_dispatch:
    inputs:
      ref:
        description: "The branch or tag to run the workflow on"
        required: true
        default: "master"

env:
  MODULE_DIRECTORY: web/bible-on-site
  NODE_VERSION_FILE: web/bible-on-site/package.json
  NODE_CACHE_DEPENDENCY_PATH: web/bible-on-site/package-lock.json

jobs:
  # STARTING FLOW
  determine_changes:
    name: Determine Changes
    uses: ./.github/workflows/shared-ci.yml
    with:
      module_directory: ${{ env.MODULE_DIRECTORY }}
      changes_filter: "web/bible-on-site"
      ci_file: ".github/workflows/website-ci.yml"

  # ACTUAL JOBS
  bump-version:
    name: Bump Website Patch Version
    needs: determine_changes
    uses: ./.github/workflows/shared-version-bump.yml
    with:
      module_directory: ${{ env.MODULE_DIRECTORY }}
      module_changed: ${{ needs.determine_changes.outputs.module_changed }}
      version_command: "npm version patch -m \"chore(release): %s [skip ci]\""
      files_to_commit: "package.json package-lock.json"
    secrets: inherit

  performance:
    name: Website Performance
    runs-on: ubuntu-latest
    needs: determine_changes
    if: ${{ needs.determine_changes.outputs.website_changed == 'true' }}
    defaults:
      run:
        working-directory: ${{ env.MODULE_DIRECTORY }}
    permissions:
      contents: read

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.head_ref }}

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}
          cache-dependency-path: ${{ env.NODE_CACHE_DEPENDENCY_PATH }}
          cache: npm

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package.json').devDependencies['@playwright/test'])")" >> $GITHUB_ENV

      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install npm Dependencies
        id: npm_ci
        run: |
          npm ci --no-audit

      - name: Install Playwright Dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          npx playwright install --with-deps
          npx playwright install-deps

      - name: Build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.MODULE_DIRECTORY }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Build
        id: npm-build
        run: npm run build

      - name: Perf Test
        id: npm-perf-test
        run: npm run test:perf

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-perf-report
          path: ${{ env.MODULE_DIRECTORY }}/playwright-report/
          retention-days: 30

  end-to-end:
    name: Website CI
    runs-on: ubuntu-latest
    needs: determine_changes
    if: ${{ needs.determine_changes.outputs.website_changed == 'true' || needs.determine_changes.outputs.ci_changed == 'true' }}
    defaults:
      run:
        working-directory: ${{ env.MODULE_DIRECTORY }}
    permissions:
      contents: read

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.head_ref }}

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ env.NODE_VERSION_FILE }}
          cache-dependency-path: ${{ env.NODE_CACHE_DEPENDENCY_PATH }}
          cache: npm

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package.json').devDependencies['@playwright/test'])")" >> $GITHUB_ENV

      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install npm Dependencies
        id: npm_ci
        run: |
          npm ci --no-audit

      - name: Install Playwright Dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          npx playwright install --with-deps
          npx playwright install-deps

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Unit Test
        id: npm-unit-test
        run: npm run test:unit

      - name: Build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.MODULE_DIRECTORY }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Build
        id: npm-build
        run: npm run build

      - name: E2E Test
        id: npm-e2e-test
        run: npm run test:e2e

      - name: Merge Test Coverage
        continue-on-error: true
        run: npm run coverage:merge

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.MODULE_DIRECTORY }}/coverage/merged/lcov.info
          disable_search: true

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ${{ env.MODULE_DIRECTORY }}/coverage/merged/lcov.info

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-e2e-report
          path: ${{ env.MODULE_DIRECTORY }}/playwright-report/
          retention-days: 30

  # CLOSING FLOW
  report_status:
    name: Report Website Status
    runs-on: ubuntu-latest
    needs: [determine_changes, performance, end-to-end]
    if: always() # This ensures the job always runs
    steps:
      - name: Determine overall status
        id: determine_status
        run: |
          PERFORMANCE_STATUS=$([ "${{ needs.performance.result }}" = "success" ] && echo "success" || echo "failure")
          E2E_STATUS=$([ "${{ needs.end-to-end.result }}" = "success" ] && echo "success" || echo "failure")

          if [ "${{ needs.determine_changes.outputs.website_changed }}" = "true" ] || [ "${{ needs.determine_changes.outputs.ci_changed }}" = "true" ]; then
            # Check Codecov status using the Codecov API
            MAX_RETRIES=10
            RETRY_COUNT=0
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              OWNER_REPO=(${GITHUB_REPOSITORY/\// })
              if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
                GITHUB_SHA=$(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha)
              else
                GITHUB_SHA=${{ github.sha }}
              fi
              CODECOV_JSON=$(curl -s -H "Authorization: token ${{ secrets.CODECOV_API_TOKEN }}" "https://api.codecov.io/api/v2/github/${OWNER_REPO[0]}/repos/${OWNER_REPO[1]}/commits/$GITHUB_SHA")
              echo "CODECOV_JSON: $CODECOV_JSON"
              if [[ "$CODECOV_JSON" == *"Invalid token"* ]] || [[ "$CODECOV_JSON" == *"error"* ]]; then
                echo "Failed to get Codecov status"
                echo "status=failure" >> $GITHUB_OUTPUT
                exit 1
              fi
              CODECOV_STATUS=$(echo "$CODECOV_JSON" | jq -r '.state')
              if [ "$CODECOV_STATUS" = "complete" ]; then
                CODECOV_RESULT=$(echo "$CODECOV_JSON" | jq -r '.ci_passed')
                if [ "$CODECOV_RESULT" = "false" ]; then
                  echo "Codecov check failed"
                  echo "status=failure" >> $GITHUB_OUTPUT
                  exit 1
                fi
                break
              fi
              if [ $RETRY_COUNT -eq $((MAX_RETRIES-1)) ]; then
                echo "Timeout waiting for Codecov status"
                echo "status=failure" >> $GITHUB_OUTPUT
                exit 1
              fi
              echo "Waiting for Codecov status to complete (attempt $((RETRY_COUNT+1))/$MAX_RETRIES)..."
              sleep 30
              RETRY_COUNT=$((RETRY_COUNT+1))
            done
            if [ "$E2E_STATUS" = "failure" ]; then
              echo "Overall status: failure"
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

          echo "Overall status: success"
          echo "status=success" >> $GITHUB_OUTPUT
