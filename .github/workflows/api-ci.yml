name: Continous Integration - api

on:
  push:
    branches: master
  pull_request:
    branches: master
  merge_group:
    branches: master
  workflow_dispatch:
    inputs:
      ref:
        description: "The branch or tag to run the workflow on"
        required: true
        default: "master"

env:
  MODULE_DIRECTORY: web/api
  CARGO_FILE: web/api/Cargo.toml
  API_TESTS_DIRECTORY: web/api/tests

jobs:
  # STARTING FLOW
  determine_changes:
    name: Determine Changes
    runs-on: ubuntu-latest
    outputs:
      api_changed: ${{ steps.check_changes.outputs.api_changed }}
      ci_changed: ${{ steps.check_changes.outputs.ci_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.head_ref }}
          fetch-depth: 0

      - name: Check for changes
        id: check_changes
        run: |
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
          else
            BASE_SHA=$(git rev-parse origin/master)
          fi
          API_CHANGED=$(git diff --name-only --diff-filter=AM $BASE_SHA HEAD | grep -q "${{ env.MODULE_DIRECTORY }}" && echo "true" || echo "false")
          CI_CHANGED=$(git diff --name-only --diff-filter=AM $BASE_SHA HEAD | grep -q ".github/workflows/api-ci.yml" && echo "true" || echo "false")
          echo "api_changed=${API_CHANGED}" >> $GITHUB_OUTPUT
          echo "ci_changed=${CI_CHANGED}" >> $GITHUB_OUTPUT

  # ACTUAL JOBS
  bump-version:
    name: Bump Patch Version
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for changes in ${{ env.MODULE_DIRECTORY }}
        id: paths_filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            api:
              - '${{ env.MODULE_DIRECTORY }}/**'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-make, cargo-release

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ env.MODULE_DIRECTORY }}

      - name: Bump patch version
        working-directory: ${{ env.MODULE_DIRECTORY }}
        if: steps.paths_filter.outputs.api == 'true'
        run: |
          cargo make bump-patch-version

      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Add Deploy Key
        uses: webfactory/ssh-agent@72c0bfd31ab22a2e11716951e3f107a9647dc97e
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Commit changes
        if: steps.paths_filter.outputs.api == 'true'
        run: |
          cd ${{ env.MODULE_DIRECTORY }}
          git add Cargo.toml Cargo.lock
          git commit -m "chore(release): Bump version [skip ci]"

      - name: Push updated version back to repository
        if: steps.paths_filter.outputs.api == 'true'
        run: |
          git remote set-url origin git@github.com:${{ github.repository }}
          git push origin HEAD --follow-tags

  api-tests:
    name: API CI
    runs-on: ubuntu-latest
    needs: determine_changes
    if: ${{ needs.determine_changes.outputs.api_changed == 'true' || needs.determine_changes.outputs.ci_changed == 'true' }}
    permissions:
      contents: read

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.head_ref }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-make, cargo-llvm-cov

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ env.MODULE_DIRECTORY }}

      - name: Lint
        id: lint
        working-directory: ${{ env.MODULE_DIRECTORY }}
        run: cargo make lint

      - name: Get installed Playwright version
        id: playwright-version
        working-directory: ${{ env.API_TESTS_DIRECTORY }}
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package.json').devDependencies['@playwright/test'])")" >> $GITHUB_ENV

      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install npm Dependencies
        id: npm_ci
        working-directory: ${{ env.API_TESTS_DIRECTORY }}
        run: |
          npm ci --no-audit

      - name: Install Playwright Dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: ${{ env.API_TESTS_DIRECTORY }}
        run: |
          npx playwright install --with-deps
          npx playwright install-deps

  # CLOSING FLOW
  report_status:
    name: Report API Status
    runs-on: ubuntu-latest
    needs: [determine_changes, api-tests]
    if: always() # This ensures the job always runs
    steps:
      - name: Determine overall status
        id: determine_status
        run: |
          API_TESTS_STATUS=$([ "${{ needs.api-tests.result }}" = "success" ] && echo "success" || echo "failure")

          if [ "${{ needs.determine_changes.outputs.api_changed }}" = "true" ] || [ "${{ needs.determine_changes.outputs.ci_changed }}" = "true" ]; then
            if [ "$API_TESTS_STATUS" = "failure" ]; then
              echo "Overall status: failure"
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

          echo "Overall status: success"
          echo "status=success" >> $GITHUB_OUTPUT
