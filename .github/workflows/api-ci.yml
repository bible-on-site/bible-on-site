name: Continous Integration - api

on:
  push:
    branches: master
  pull_request:
    branches: master
  merge_group:
    branches: master
  workflow_dispatch:
    inputs:
      ref:
        description: "The branch or tag to run the workflow on"
        required: true
        default: "master"

env:
  MODULE_DIRECTORY: web/api
  CARGO_FILE: web/api/Cargo.toml
  API_TESTS_DIRECTORY: web/api/tests

jobs:
  # STARTING FLOW
  determine_changes:
    name: Determine Changes
    uses: ./.github/workflows/shared-ci.yml
    with:
      module_directory: ${{ github.env.MODULE_DIRECTORY }}
      changes_filter: "web/api"
      ci_file: ".github/workflows/api-ci.yml"

  bump-version:
    name: Bump Patch Version
    needs: determine_changes
    permissions:
      contents: write
    uses: ./.github/workflows/shared-version-bump.yml
    with:
      module_directory: ${{ github.env.MODULE_DIRECTORY }}
      module_changed: ${{ needs.determine_changes.outputs.module_changed }}
      version_command: "cargo make bump-patch-version"
      files_to_commit: "Cargo.toml Cargo.lock"
    secrets: inherit

  # ACTUAL JOBS
  api-tests:
    name: API CI
    runs-on: ubuntu-latest
    needs: determine_changes
    if: ${{ needs.determine_changes.outputs.api_changed == 'true' || needs.determine_changes.outputs.ci_changed == 'true' }}
    permissions:
      contents: read

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.head_ref }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-make, cargo-llvm-cov

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ env.MODULE_DIRECTORY }}

      - name: Lint
        id: lint
        working-directory: ${{ env.MODULE_DIRECTORY }}
        run: cargo make lint

      - name: Get installed Playwright version
        id: playwright-version
        working-directory: ${{ env.API_TESTS_DIRECTORY }}
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package.json').devDependencies['@playwright/test'])")" >> $GITHUB_ENV

      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install npm Dependencies
        id: npm_ci
        working-directory: ${{ env.API_TESTS_DIRECTORY }}
        run: |
          npm ci --no-audit

      - name: Install Playwright Dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: ${{ env.API_TESTS_DIRECTORY }}
        run: |
          npx playwright install --with-deps
          npx playwright install-deps

  # CLOSING FLOW
  report_status:
    name: Report API Status
    runs-on: ubuntu-latest
    needs: [determine_changes, api-tests]
    if: always() # This ensures the job always runs
    steps:
      - name: Determine overall status
        id: determine_status
        run: |
          API_TESTS_STATUS=$([ "${{ needs.api-tests.result }}" = "success" ] && echo "success" || echo "failure")

          if [ "${{ needs.determine_changes.outputs.api_changed }}" = "true" ] || [ "${{ needs.determine_changes.outputs.ci_changed }}" = "true" ]; then
            if [ "$API_TESTS_STATUS" = "failure" ]; then
              echo "Overall status: failure"
              echo "status=failure" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

          echo "Overall status: success"
          echo "status=success" >> $GITHUB_OUTPUT
