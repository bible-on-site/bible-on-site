name: Continous Integration

on:
  push:
    branches: master
  pull_request:
    branches: master
  merge_group:
    branches: master
  workflow_dispatch:
    inputs:
      ref:
        description: "The branch or tag to run the workflow on"
        required: true
        default: "master"

env:
  WEBSITE_DIRECTORY: web/bible-on-site
  WEBSITE_NODE_VERSION_FILE: web/bible-on-site/package.json
  WEBSITE_NODE_CACHE_PATH: web/bible-on-site/package-lock.json
  API_DIRECTORY: web/api
  API_CARGO_FILE: web/api/Cargo.toml
  API_TESTS_DIRECTORY: web/api/tests

jobs:
  # ENV SETUP
  setup_env:
    name: Setup Environment Variables
    runs-on: ubuntu-latest
    outputs:
      website_module_dir: web/bible-on-site
      api_module_dir: web/api
      WEBSITE_PLAYWRIGHT_VERSION: ${{ steps.get_website_playwright_version.outputs.PLAYWRIGHT_VERSION }}
      API_PLAYWRIGHT_VERSION: ${{ steps.get_api_playwright_version.outputs.PLAYWRIGHT_VERSION }}
    steps:
      - run: echo "Setting up environment variables"
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.head_ref }}
      - name: Get API Playwright version
        id: get_api_playwright_version
        working-directory: ${{ env.API_TESTS_DIRECTORY }}
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package.json').devDependencies['@playwright/test'])")" >> $GITHUB_OUTPUT
      - name: Get Website Playwright version
        id: get_website_playwright_version
        working-directory: ${{ env.WEBSITE_DIRECTORY }}
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package.json').devDependencies['@playwright/test'])")" >> $GITHUB_OUTPUT

  # STARTING FLOW
  determine_website_changes:
    name: Determine Website Changes
    needs: setup_env
    secrets: inherit
    uses: ./.github/workflows/shared-ci.yml
    with:
      module_directory: ${{ needs.setup_env.outputs.website_module_dir }}
      module_name: ${{ needs.setup_env.outputs.website_module_dir }}
      ci_path: ".github/workflows/ci.yml,.github/workflows/shared-ci.yml,.github/workflows/shared-release.yml"

  determine_api_changes:
    name: Determine API Changes
    needs: setup_env
    secrets: inherit
    uses: ./.github/workflows/shared-ci.yml
    with:
      module_directory: ${{ needs.setup_env.outputs.api_module_dir }}
      module_name: ${{ needs.setup_env.outputs.api_module_dir }}
      ci_path: ".github/workflows/ci.yml,.github/workflows/shared-ci.yml,.github/workflows/shared-release.yml"

  build_lcov_docker:
    name: Build LCOV Docker Image
    needs: setup_env
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.head_ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and cache Docker image
        uses: docker/build-push-action@v6
        with:
          context: web/bible-on-site/tests/util/coverage/lcov-docker/
          file: web/bible-on-site/tests/util/coverage/lcov-docker/Dockerfile
          tags: lcov-cli:0.0.1
          outputs: type=docker,dest=/tmp/lcov-docker-image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: lcov-docker-image
          path: /tmp/lcov-docker-image.tar
          retention-days: 90

  # ACTUAL JOBS
  website_performance:
    name: Website Performance
    runs-on: ubuntu-latest
    needs: [setup_env, determine_website_changes]
    if: ${{ needs.determine_website_changes.outputs.module_changed == 'true' }}
    defaults:
      run:
        working-directory: ${{ env.WEBSITE_DIRECTORY }}
    permissions:
      contents: read

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.head_ref }}

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ env.WEBSITE_NODE_VERSION_FILE }}
          cache-dependency-path: ${{ env.WEBSITE_NODE_CACHE_PATH }}
          cache: npm

      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ needs.setup_env.outputs.WEBSITE_PLAYWRIGHT_VERSION }}

      - name: Install npm Dependencies
        id: npm_ci
        run: |
          npm ci --no-audit

      - name: Install Playwright Dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          npx playwright install --with-deps
          npx playwright install-deps

      - name: Build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.WEBSITE_DIRECTORY }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: Build
        id: npm-build
        run: npm run build

      - name: Perf Test
        id: npm-perf-test
        run: npm run test:perf

      - uses: actions/upload-artifact@v4
        with:
          name: performance-coverage
          path: ${{ env.WEBSITE_DIRECTORY }}/coverage/
          retention-days: 30
          overwrite: true

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-perf-report
          path: ${{ env.WEBSITE_DIRECTORY }}/playwright-report/
          retention-days: 30

  website_e2e:
    name: Website CI
    runs-on: ubuntu-latest
    needs: [setup_env, determine_website_changes]
    if: ${{ needs.determine_website_changes.outputs.module_changed == 'true' || needs.determine_website_changes.outputs.ci_changed == 'true' }}
    defaults:
      run:
        working-directory: ${{ env.WEBSITE_DIRECTORY }}
    permissions:
      contents: read

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.head_ref }}

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ env.WEBSITE_NODE_VERSION_FILE }}
          cache-dependency-path: ${{ env.WEBSITE_NODE_CACHE_PATH }}
          cache: npm

      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ needs.setup_env.outputs.WEBSITE_PLAYWRIGHT_VERSION }}

      - name: Install npm Dependencies
        id: npm_ci
        run: |
          npm ci --no-audit

      - name: Install Playwright Dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          npx playwright install --with-deps
          npx playwright install-deps

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Unit Test
        id: npm-unit-test
        run: npm run test:unit

      - name: Build cache
        uses: actions/cache@v4
        with:
          path: ${{ env.WEBSITE_DIRECTORY }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: Build
        id: npm-build
        run: npm run build

      - name: E2E Test
        id: npm-e2e-test
        run: npm run test:e2e

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: lcov-docker-image
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/lcov-docker-image.tar

      - name: Merge Test Coverage
        continue-on-error: true
        run: npm run coverage:merge

      - uses: actions/upload-artifact@v4
        with:
          name: website-coverage
          path: ${{ env.WEBSITE_DIRECTORY }}/coverage/merged/lcov.info
          retention-days: 30
          overwrite: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.WEBSITE_DIRECTORY }}/coverage/merged/lcov.info
          disable_search: true

      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ${{ env.WEBSITE_DIRECTORY }}/coverage/merged/lcov.info

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-e2e-report
          path: ${{ env.WEBSITE_DIRECTORY }}/playwright-report/
          retention-days: 30

  api_tests:
    name: API CI
    runs-on: ubuntu-latest
    needs: [setup_env, determine_api_changes]
    if: ${{ needs.determine_api_changes.outputs.module_changed == 'true' || needs.determine_api_changes.outputs.ci_changed == 'true' }}
    permissions:
      contents: read

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.head_ref }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-make, cargo-llvm-cov

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ env.API_DIRECTORY }}

      - name: Lint
        id: lint
        working-directory: ${{ env.API_DIRECTORY }}
        run: cargo make lint

      - name: Cache playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ needs.setup_env.outputs.API_PLAYWRIGHT_VERSION }}

      - name: Install npm Dependencies
        id: npm_ci
        working-directory: ${{ env.API_TESTS_DIRECTORY }}
        run: |
          npm ci --no-audit

      - name: Install Playwright Dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: ${{ env.API_TESTS_DIRECTORY }}
        run: |
          npx playwright install --with-deps
          npx playwright install-deps

  # CLOSING FLOW
  ci_checks_passing:
    name: CI Checks Passing
    runs-on: ubuntu-latest
    needs: [determine_website_changes, determine_api_changes, website_performance, website_e2e, api_tests]
    if: ${{ always() }}
    steps:
      - name: Determine overall status
        id: determine_status
        run: |
          PERFORMANCE_STATUS=$([ "${{ needs.website_performance.result }}" = "success" ] && echo "success" || echo "failure")
          E2E_STATUS=$([ "${{ needs.website_e2e.result }}" = "success" ] && echo "success" || echo "failure")
          API_STATUS=$([ "${{ needs.api_tests.result }}" = "success" ] && echo "success" || echo "failure")

          if [ "${{ needs.determine_website_changes.result }}" = "failure" ] || [ "${{ needs.determine_api_changes.result }}" = "failure" ]; then
            echo "Overall status: failure"
            exit 1
          fi

          if [ "${{ needs.determine_website_changes.outputs.module_changed }}" = "true" ] || [ "${{ needs.determine_website_changes.outputs.ci_changed }}" = "true" ]; then
            if [ "$E2E_STATUS" = "failure" ]; then
              echo "Overall status: failure"
              exit 1
            fi
            # Check Codecov status using the Codecov API
            MAX_RETRIES=10
            RETRY_COUNT=0
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              OWNER_REPO=(${GITHUB_REPOSITORY/\// })
              if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
                GITHUB_SHA=$(cat $GITHUB_EVENT_PATH | jq -r .pull_request.head.sha)
              else
                GITHUB_SHA=${{ github.sha }}
              fi
              CODECOV_JSON=$(curl -s -H "Authorization: token ${{ secrets.CODECOV_API_TOKEN }}" "https://api.codecov.io/api/v2/github/${OWNER_REPO[0]}/repos/${OWNER_REPO[1]}/commits/$GITHUB_SHA")
              echo "CODECOV_JSON: $CODECOV_JSON"
              if [[ "$CODECOV_JSON" == *"Invalid token"* ]] || [[ "$CODECOV_JSON" == *"error"* ]]; then
                echo "Failed to get Codecov status"
                echo "status=failure" >> $GITHUB_OUTPUT
                exit 1
              fi
              CODECOV_STATUS=$(echo "$CODECOV_JSON" | jq -r '.state')
              if [ "$CODECOV_STATUS" = "complete" ]; then
                CODECOV_RESULT=$(echo "$CODECOV_JSON" | jq -r '.ci_passed')
                if [ "$CODECOV_RESULT" = "false" ]; then
                  echo "Codecov check failed"
                  echo "status=failure" >> $GITHUB_OUTPUT
                  exit 1
                fi
                break
              fi
              if [ $RETRY_COUNT -eq $((MAX_RETRIES-1)) ]; then
                echo "Timeout waiting for Codecov status"
                echo "status=failure" >> $GITHUB_OUTPUT
                exit 1
              fi
              echo "Waiting for Codecov status to complete (attempt $((RETRY_COUNT+1))/$MAX_RETRIES)..."
              sleep 30
              RETRY_COUNT=$((RETRY_COUNT+1))
            done
          fi

          if [ "${{ needs.determine_api_changes.outputs.module_changed }}" = "true" ] || [ "${{ needs.determine_api_changes.outputs.ci_changed }}" = "true" ]; then
            if [ "$API_STATUS" = "failure" ]; then
              echo "Overall status: failure"
              exit 1
            fi
          fi

          echo "Overall status: success"

  # RELEASES
  debug_release:
    name: Debug Release
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [setup_env, determine_website_changes, determine_api_changes, ci_checks_passing]
    steps:
      - name: Debug Release inputs
        run: |
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.ref: ${{ github.ref }}"
          echo "determine_website_changes.module_changed: ${{ needs.determine_website_changes.outputs.module_changed }}"
          echo "determine_api_changes.module_changed: ${{ needs.determine_api_changes.outputs.module_changed }}"
          echo "ci_checks_passing: ${{ toJSON(needs.ci_checks_passing) }}"
          echo "needs: ${{ toJSON(needs) }}"
      - name: Test is push
        if: github.event_name == 'push'
        run: echo "Push event"
      - name: Test is main branch
        if: github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: echo "Main branch"
      - name: Test website changed
        if: needs.determine_website_changes.outputs.module_changed == 'true'
        run: echo "Website changed"
      - name: Test api changed
        if: needs.determine_api_changes.outputs.module_changed == 'true'
        run: echo "API changed"
      - name: Test should release website
        if: github.event_name == 'push' && needs.determine_website_changes.outputs.module_changed == 'true' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: echo "Release website"
      - name: Test should release api
        if: github.event_name == 'push' && needs.determine_api_changes.outputs.module_changed == 'true' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: echo "Release api"

  release_website:
    name: Release Website
    needs: [setup_env, determine_website_changes, ci_checks_passing]
    if: ${{ always() }}
    permissions:
      contents: write
      actions: read
    secrets: inherit
    uses: ./.github/workflows/shared-release.yml
    with:
      module_changed: ${{ needs.determine_website_changes.outputs.module_changed }}
      module_directory: ${{ needs.setup_env.outputs.website_module_dir }}
      version_command: 'npm version patch -m "chore(release): %s [skip ci]"'
      files_to_commit: "package.json package-lock.json"

  release_api:
    name: Release API
    needs: [setup_env, determine_api_changes, ci_checks_passing]
    if: ${{ always() }}
    permissions:
      contents: write
      actions: read
    secrets: inherit
    uses: ./.github/workflows/shared-release.yml
    with:
      module_changed: ${{ needs.determine_api_changes.outputs.module_changed }}
      module_directory: ${{ needs.setup_env.outputs.api_module_dir }}
      version_command: 'cargo release patch --execute --no-confirm --config commit-message="chore(release): {{version}} [skip ci]"'
      files_to_commit: "Cargo.toml Cargo.lock"
