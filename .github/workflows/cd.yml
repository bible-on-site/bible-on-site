name: Continuous Deployment

on:
  repository_dispatch:
    types: [deploy]
jobs:
  deploy:
    permissions:
      contents: read
    runs-on: ubuntu-latest

    env:
      DEVOPS_DIRECTORY: devops
      DEVOPS_NODE_CACHE_PATH: devops/package-lock.json
      DEVOPS_NODE_VERSION_FILE: devops/package.json
      MODULE_NAME: ${{ github.event.client_payload.module_name }}
      MODULE_DIRECTORY: ${{ github.event.client_payload.module_directory }}
      MODULE_VERSION: ${{ github.event.client_payload.module_version }}
      DOCKER_ARTIFACT_NAME: ${{ github.event.client_payload.docker_artifact_name }}
      DOCKER_IMAGE_NAME: ${{ github.event.client_payload.module_directory == 'web/bible-on-site' && 'bible-on-site' || 'bible-on-site-api' }}
      DOCKER_IMAGE_OUTPUT_DIR: ${{ github.event.client_payload.module_directory }}/.release
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.ref }}

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ env.DEVOPS_NODE_VERSION_FILE }}
          cache-dependency-path: ${{ env.DEVOPS_NODE_CACHE_PATH }}
          cache: npm

      - name: Install npm Dependencies
        id: npm_ci
        working-directory: ${{ env.DEVOPS_DIRECTORY }}
        run: |
          npm ci --no-audit

      - name: Spread Secrets to Environment Variables
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }} # TODO: spread just the required secrets (SSH related, mostly)

      - name: Prepare Docker Restore
        id: prepare_docker_restore
        run: |
          mkdir -p "$DOCKER_IMAGE_OUTPUT_DIR"
          DOCKER_IMAGE_TAR_NAME="${{ env.DOCKER_IMAGE_NAME }}-v${{ env.MODULE_VERSION }}.tar"
          DOCKER_IMAGE_TAR_PATH="${{ env.DOCKER_IMAGE_OUTPUT_DIR }}/${DOCKER_IMAGE_TAR_NAME}"
          DOCKER_IMAGE_TAR_GZ_PATH="${DOCKER_IMAGE_TAR_PATH}.gz"
          echo "DOCKER_IMAGE_TAR_GZ_PATH=${DOCKER_IMAGE_TAR_GZ_PATH}" >> $GITHUB_OUTPUT

      - name: Restore Docker Image
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.DOCKER_ARTIFACT_NAME }}
          path: ${{ env.DOCKER_IMAGE_OUTPUT_DIR }}

      - name: Deploy to Production
        id: deploy
        working-directory: ${{ env.DEVOPS_DIRECTORY }}
        run: |
          npm run deploy -- --module-name ${{ env.MODULE_NAME }} --module-version "${{ env.MODULE_VERSION }}"
