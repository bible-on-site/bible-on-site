name: Shared Release Flow
on:
  workflow_call:
    inputs:
      module_directory:
        required: true
        type: string
    secrets:
      DEPLOY_KEY:
        required: true

permissions:
  contents: write
env:
  IS_NPM: ${{ inputs.module_directory == 'web/bible-on-site' }}
  IS_CARGO: ${{ inputs.module_directory == 'web/api' }}
  MODULE_NAME: ${{ inputs.module_directory == 'web/bible-on-site' && 'website' || 'api' }}
  MODULE_NAME_CAPITALIZED: ${{ inputs.module_directory == 'web/bible-on-site' && 'Website' || 'API' }}
  DOCKER_IMAGE_NAME: ${{ inputs.module_directory == 'web/bible-on-site' && 'bible-on-site' || 'bible-on-site-api' }}
  DOCKER_IMAGE_OUTPUT_DIR: ${{ inputs.module_directory }}/.release

jobs:
  setup_env:
    name: Setup Environment Variables
    runs-on: ubuntu-latest
    outputs:
      MODULE_NAME: ${{ env.MODULE_NAME }} # a workaround for places where only needs.<job_id>.<output> is allowed
    steps:
      - run: echo "Setting up environment variables"

  release:
    needs: setup_env
    name: Release
    # Ensures only one release job runs at a time for this repository.
    # This prevents potential race conditions which has been proven to occur.
    #
    # It acts as a safeguard against:
    # - Multiple triggers if the merge queue (despite squash settings) pushes multiple commits rapidly.
    #   TODO: Investigate the root cause of multiple triggers from the merge queue.
    # - Collisions from manual workflow runs or other concurrent triggers.
    concurrency:
      group: ${{ github.repository }}-release-${{ needs.setup_env.outputs.MODULE_NAME }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        if: ${{ env.IS_NPM == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ inputs.MODULE_DIRECTORY }}/package.json
          cache-dependency-path: ${{ inputs.MODULE_DIRECTORY }}/package-lock.json
          cache: npm

      - name: Install NPM Dependencies
        if: ${{ env.IS_NPM == 'true' }}
        working-directory: ${{ inputs.module_directory }}
        id: npm_ci
        run: |
          npm ci --no-audit

      - name: Setup Rust
        if: ${{ env.IS_CARGO == 'true' }}
        uses: dtolnay/rust-toolchain@stable

      - uses: taiki-e/install-action@v2
        if: ${{ env.IS_CARGO == 'true' }}
        with:
          tool: cargo-make, tomato-toml, semver-bump

      - name: Cache Cargo dependencies
        if: ${{ env.IS_CARGO == 'true' }}
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ inputs.module_directory }}

      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Bump ${{ env.MODULE_NAME_CAPITALIZED }} Version
        working-directory: ${{ inputs.module_directory }}
        run: |
          if [ "${{ env.IS_NPM }}" = "true" ]; then # Generated
            npm version patch --no-git-tag-version
          elif [ "${{ env.IS_CARGO }}" = "true" ]; then # Generated
            cargo make bump-version
          fi

      - name: Get Bumped Version
        id: get_bumped_version
        working-directory: ${{ inputs.module_directory }}
        run: |
          # TODO implement in root devops script
          if [ "${{ env.MODULE_NAME }}" = "website" ]; then # Generated
            echo "BUMPED_VERSION=$(npm run version | tail -1)" >> $GITHUB_OUTPUT
          elif [ "${{ env.MODULE_NAME }}" = "api" ]; then # Generated
            echo "BUMPED_VERSION=$(cargo make version | grep -v 'INFO')" >> $GITHUB_OUTPUT
          fi

      - name: Add Deploy Key
        uses: webfactory/ssh-agent@72c0bfd31ab22a2e11716951e3f107a9647dc97e
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Commit ${{ env.MODULE_NAME_CAPITALIZED }} Version Bump Changes
        working-directory: ${{ inputs.module_directory }}
        run: |
          if [ "${{ env.IS_NPM }}" = "true" ]; then
            FILES_TO_ADD="package.json package-lock.json"
          elif [ "${{ env.IS_CARGO }}" = "true" ]; then
            FILES_TO_ADD="Cargo.toml Cargo.lock"
          fi
          git add $FILES_TO_ADD # Generated
          git commit -n -m "chore(release): Bump ${{ env.MODULE_NAME }} version to ${{ steps.get_bumped_version.outputs.BUMPED_VERSION }} [skip ci]"

      - name: Prepare Dockerizing
        id: prepare_dockerizing
        run: |
          mkdir -p ${{ env.DOCKER_IMAGE_OUTPUT_DIR }}
          DOCKER_IMAGE_TAR_NAME="${{ env.DOCKER_IMAGE_NAME }}-v${{ steps.get_bumped_version.outputs.BUMPED_VERSION }}.tar"
          DOCKER_IMAGE_TAR_GZ_NAME="${DOCKER_IMAGE_TAR_NAME}.gz"
          DOCKER_IMAGE_TAR_PATH="${{ env.DOCKER_IMAGE_OUTPUT_DIR }}/${DOCKER_IMAGE_TAR_NAME}"
          echo "DOCKER_IMAGE_TAR_GZ_NAME=${DOCKER_IMAGE_TAR_GZ_NAME}" >> $GITHUB_OUTPUT
          echo "DOCKER_IMAGE_TAR_PATH=${DOCKER_IMAGE_TAR_PATH}" >> $GITHUB_OUTPUT
          echo "DOCKER_IMAGE_TAR_GZ_PATH=${DOCKER_IMAGE_TAR_PATH}.gz" >> $GITHUB_OUTPUT

      - name: Dockerize ${{ env.MODULE_NAME_CAPITALIZED }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.module_directory }}
          file: ${{ inputs.module_directory }}/Dockerfile
          tags: ${{ env.DOCKER_IMAGE_NAME }}:${{ steps.get_bumped_version.outputs.BUMPED_VERSION }}
          outputs: type=docker,dest=${{ steps.prepare_dockerizing.outputs.DOCKER_IMAGE_TAR_PATH }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Tag
        id: create_tag
        run: |
          TAG_NAME=$(echo "${{ env.MODULE_NAME }}-v${{ steps.get_bumped_version.outputs.BUMPED_VERSION }}")
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"

      - name: Push Changes (I.E. Version Bump) and the Tag
        run: |
          git remote set-url origin git@github.com:${{ github.repository }}
          git push origin HEAD --tags --follow-tags

      - name: GZip Docker Image
        working-directory: ${{ env.DOCKER_IMAGE_OUTPUT_DIR }}
        run: |
          gzip -f ${{ steps.prepare_dockerizing.outputs.DOCKER_IMAGE_TAR_PATH }}

      - name: Create GitHub Release For ${{ env.MODULE_NAME_CAPITALIZED }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.MODULE_NAME }}-v${{ steps.get_bumped_version.outputs.BUMPED_VERSION }}
          release_name: Release ${{ env.MODULE_NAME_CAPITALIZED }} v${{ steps.get_bumped_version.outputs.BUMPED_VERSION }}
          body: |
            Automated release for ${{ env.MODULE_NAME_CAPITALIZED }} version ${{ steps.get_bumped_version.outputs.BUMPED_VERSION }}.
          draft: false
          prerelease: false

      - name: Upload ${{ env.MODULE_NAME_CAPITALIZED }} Image to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.prepare_dockerizing.outputs.DOCKER_IMAGE_TAR_GZ_PATH }}
          asset_name: ${{ steps.prepare_dockerizing.outputs.DOCKER_IMAGE_TAR_GZ_NAME }}
          asset_content_type: application/gzip
