name: Shared Release Flow
on:
  workflow_call:
    inputs:
      module_changed:
        required: true
        type: string
      module_directory:
        required: true
        type: string
    secrets:
      DEPLOY_KEY:
        required: true

permissions:
  contents: write
env:
  IS_NPM: ${{ inputs.module_directory == 'web/bible-on-site' }}
  IS_CARGO: ${{ inputs.module_directory == 'web/api' }}
  MODULE_NAME: ${{ inputs.module_directory == 'web/bible-on-site' && 'Website' || 'API' }}

jobs:
  release:
    name: Release
    # Ensures only one release job runs at a time for this repository.
    # This prevents potential race conditions which has been proven to occur.
    #
    # It acts as a safeguard against:
    # - Multiple triggers if the merge queue (despite squash settings) pushes multiple commits rapidly.
    #   TODO: Investigate the root cause of multiple triggers from the merge queue.
    # - Collisions from manual workflow runs or other concurrent triggers.
    concurrency:
      group: ${{ github.repository }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    if: ${{ inputs.module_changed == 'true' && github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)}}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        if: ${{ env.IS_NPM == 'true' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: ${{ inputs.MODULE_DIRECTORY }}/package.json
          cache-dependency-path: ${{ inputs.MODULE_DIRECTORY }}/package-lock.json
          cache: npm

      - name: Install NPM Dependencies
        if: ${{ env.IS_NPM == 'true' }}
        working-directory: ${{ inputs.module_directory }}
        id: npm_ci
        run: |
          npm ci --no-audit

      - name: Setup Rust
        if: ${{ env.IS_CARGO == 'true' }}
        uses: dtolnay/rust-toolchain@stable

      - uses: taiki-e/install-action@v2
        if: ${{ env.IS_CARGO == 'true' }}
        with:
          tool: cargo-make, cargo-release

      - name: Cache Cargo dependencies
        if: ${{ env.IS_CARGO == 'true' }}
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ${{ inputs.module_directory }}

      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Bump ${{ env.MODULE_NAME }} Version
        working-directory: ${{ inputs.module_directory }}
        run: |
          if [ "${{ env.IS_NPM }}" = "true" ]; then # Generated
            npm version patch --no-git-tag-version -m "chore(release): %s [skip ci]"
          elif [ "${{ env.IS_CARGO }}" = "true" ]; then # Generated
            cargo release patch --execute --no-confirm --config commit-message="chore(release): {{version}} [skip ci]"
          fi
      - name: Get Bumped Version
        id: get_bumped_version
        working-directory: ${{ inputs.module_directory }}
        run: |
          if [ "${{ env.MODULE_NAME }}" = "Website" ]; then # Generated
            echo "BUMPED_VERSION=$(cargo make version | grep -v 'INFO')" >> $GITHUB_OUTPUT
          elif [ "${{ env.MODULE_NAME }}" = "API" ]; then # Generated
            echo "BUMPED_VERSION=$(npm run version | grep -v -e \"^$\" -e \">\")" >> $GITHUB_OUTPUT
          fi

      - name: Add Deploy Key
        uses: webfactory/ssh-agent@72c0bfd31ab22a2e11716951e3f107a9647dc97e
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Commit ${{ env.MODULE_NAME }} Version Bump Changes
        working-directory: ${{ inputs.module_directory }}
        run: |
          if [ "${{ env.IS_NPM }}" = "true" ]; then # Generated
            git add package.json package-lock.json
          elif [ "${{ env.IS_CARGO }}" = "true" ]; then # Generated
            git add Cargo.toml Cargo.lock
          fi
          git commit -n -m "chore(release): Bump ${{ env.MODULE_NAME }} version to ${{ steps.get_bumped_version.outputs.BUMPED_VERSION }} [skip ci]"

      - name: Push ${{ env.MODULE_NAME }} Version Bump Changes
        run: |
          git remote set-url origin git@github.com:${{ github.repository }}
          git push origin HEAD --follow-tags

      - name: Dockerize ${{ env.MODULE_NAME }}
        working-directory: ${{ inputs.module_directory }}
        run: ${{ env.IS_CARGO == 'true' && 'cargo make package' || 'npm run package' }}

      - name: Create Tag
        id: create_tag
        run: |
          TAG_NAME=$(echo "${{ env.MODULE_NAME }}-v${{ steps.get_bumped_version.outputs.BUMPED_VERSION }}")
          git tag -a "$TAG_NAME" -m "Release $TAG_NAME"
          git push origin "$TAG_NAME"
